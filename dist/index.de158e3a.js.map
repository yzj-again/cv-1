{"mappings":"AAAA,IAAI,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,AAAC;AAC3C,IAAI,KAAK,GAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,AAAC;AAE3C,IAAI,MAAM,GAAG,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDd,CAAC;AACD,qBAAW;AACD,0BAAA;AACM,uBAAP;AAEK,mBAAL;AACC,cAAJ;AACE,wCAAgC;AACxC,sCAAc;AACU,cAAlB;AACE,IAAJ,OAAO,GAAG,EAAE,AAAC;AAEjB,IAAI,CAAC,GAAG,CAAC,AAAC,EAAA,2BAAW;AAEL,6CAAiB;AACrB,uCAA2B;AACvC,kEAGU,CACV,iBAAO;AACG,4DAAkB;AACI,6JAQ9B,CACF,cAAM;AACE,IAAJ,IAAI,GAAG,IAAM;IACb,UAAU,CAAC,IAAM;QACb,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE;YAEnB,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAClB,OAAO,GAAG,OAAO,GAAG,MAAM,CAAC;iBACxB,IAAG,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,EACvB,OAAO,GAAC,OAAO,GAAC,OAAO,CAAC;iBAExB,OAAO,GAAG,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,CAAA,sBAAc;YACP,IAAJ,CAAC,SAAS,GAAG,OAAO,CAAC;YACzB,KAAK,CAAC,SAAS,GAAC,MAAM,CAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,CAAC;YACtC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtB,wCAA0B;YACA,sBAAJ;YACE,MAAN,CAAC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAC,IAAI,CAAC,CAAC;YACtB,IAAI,EAAE,CAAC,CAAA,oCAAoB;SACd;KACpB,EAAE,CAAC,CAAC,CAAC;CACT;AACA,IAAI,EAAE,CAAC,CAAA,2BAAe;CACX,WAAL;CACH,yEAIS","sources":["src/main.js"],"sourcesContent":["let demo = document.querySelector(\"#demo\");\r\nlet style=document.querySelector(\"#style\");\r\n\r\nlet string = `/*你好，我是一名前端新人\r\n接下来我要加入css样式\r\n我要加的样式是*/\r\nbody{\r\n    color:red;\r\n}\r\n/*接下来我演示一下我的前端功底\r\n首先给我一个div*/\r\n#div1{\r\n    border:1px solid black;\r\n    width:200px;\r\n    height:200px;\r\n}\r\n/*接下来我把div变成一个八卦图\r\n* 注意看好了\r\n* 首先，把div变成一个圆\r\n*/\r\n#div1{\r\n    border-radius:50%;\r\n    box-shadow:0 0 3px rgba(0,0,0,0.5);\r\n    border:none;\r\n} \r\n/*八卦是阴阳形成的\r\n* 一黑一白\r\n*/\r\n#div1{\r\nbackground: linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(0,0,0,1) 50%, rgba(0,0,0,1) 100%);\r\n}\r\n/*加两个球*/\r\n#div1:before{\r\n    width:100px;\r\n    height:100px;\r\n    top:0;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    background:black;\r\n    border-radius:50%;\r\n    background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\r\n}\r\n#div1:after{\r\n    width:100px;\r\n    height:100px;\r\n    bottom:0;\r\n    left:50%;\r\n    transform:translateX(-50%);\r\n    background:white;\r\n    border-radius:50%;\r\n    background: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 100%);\r\n}\r\n`\r\n//定位div1的位置\r\n//背景渐变解决八卦\r\n//伪元素生成小圆\r\n\r\n//js自动滚动条\r\n//实现回车\r\n//string=string.replaceAll('\\n','<br>');\r\n//发现会打出回车，思路错误\r\n//缓存结果\r\nlet string2 = '';\r\n\r\nlet n = 0;//从0开始可以做下标\r\n\r\n//demo.innerHTML=string[n];不要一个一个\r\n//demo.innerHTML=string.substring(0,n);\r\n/*setInterval(()=>{\r\n    n=n+1;\r\n    demo.innerHTML=n;\r\n},1000);*/\r\n//只会响一次\r\n//老手用setTimeout的递归，好处是可以控制停止\r\n/*\r\nlet step=()=>{\r\n    setTimeout(()=>{\r\n        n=n+1;\r\n        demo.innerHTML=n;\r\n        step();//step做完后，再此调用step()\r\n    },1000);\r\n}\r\n*/\r\n//最终代码\r\nlet step = () => {\r\n    setTimeout(() => {\r\n        if (n < string.length) {\r\n\r\n            if (string[n] === '\\n') {\r\n                string2 = string2 + \"<br>\";\r\n            } else if(string[n] === ' ') {//如果是空格，改成&nbsp,一个一个改\r\n                string2=string2+'&nbsp';\r\n            }else{//如果不是回车照搬\r\n                string2 = string2 + string[n];\r\n            }//is-else 可以简化\r\n            demo.innerHTML = string2;\r\n            style.innerHTML=string.substring(0,n);\r\n            n = n + 1;\r\n//n=string.length时不会进入if判断\r\n            //js实现自动滚动\r\n            window.scrollTo(0,9999);\r\n            demo.scrollTo(0,9999);\r\n            step();//step做完后，再次调用step()\r\n        }\r\n    }, 0);\r\n}\r\n step();//两次step()直接变成3\r\n//添加css\r\n/*\r\nstyle.innerHTML=`\r\nbody{\r\n    color:red;\r\n}`//可以被实时改写*/\r\n"],"names":[],"version":3,"file":"index.de158e3a.js.map","sourceRoot":"/__parcel_source_root/"}